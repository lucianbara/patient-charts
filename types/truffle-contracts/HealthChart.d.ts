/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface HealthChartContract
  extends Truffle.Contract<HealthChartInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<HealthChartInstance>;
}

export interface TransferPatient {
  name: "TransferPatient";
  args: {
    patientSsn: string;
    0: string;
  };
}

export interface UpdateChart {
  name: "UpdateChart";
  args: {
    patientSsn: string;
    healthEventId: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = TransferPatient | UpdateChart;

export interface HealthChartInstance extends Truffle.ContractInstance {
  doctorAddresses(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  doctorUserNames(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string; 3: string; 4: string }>;

  doctor_id(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  doctors(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string; 3: string; 4: string }>;

  event_id(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  eventsForPatient(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  healthEvents(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string; 3: BN }>;

  patients(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string; 3: string }>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  addDoctor: {
    (
      _userName: string,
      _passWord: string,
      _doctorAddress: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _userName: string,
      _passWord: string,
      _doctorAddress: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _userName: string,
      _passWord: string,
      _doctorAddress: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _userName: string,
      _passWord: string,
      _doctorAddress: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addPatient: {
    (
      _ssn: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _ssn: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _ssn: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _ssn: string,
      _firstName: string,
      _lastName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authenticateDoctor(
    _id: number | BN | string,
    _userName: string,
    _password: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferPatient: {
    (
      _newDoctorId: number | BN | string,
      _patientSsn: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _newDoctorId: number | BN | string,
      _patientSsn: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _newDoctorId: number | BN | string,
      _patientSsn: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newDoctorId: number | BN | string,
      _patientSsn: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addHealthEvent: {
    (
      _patientSsn: string,
      _eventData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _patientSsn: string,
      _eventData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _patientSsn: string,
      _eventData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _patientSsn: string,
      _eventData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPatient(
    _patientSsn: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string }>;

  getEventsForPatient(
    _patientSsn: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getEventDetails(
    _eventId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: BN }>;

  methods: {
    doctorAddresses(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    doctorUserNames(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string; 3: string; 4: string }>;

    doctor_id(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    doctors(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string; 3: string; 4: string }>;

    event_id(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    eventsForPatient(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    healthEvents(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string; 3: BN }>;

    patients(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string; 3: string }>;

    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    addDoctor: {
      (
        _userName: string,
        _passWord: string,
        _doctorAddress: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _userName: string,
        _passWord: string,
        _doctorAddress: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _userName: string,
        _passWord: string,
        _doctorAddress: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _userName: string,
        _passWord: string,
        _doctorAddress: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addPatient: {
      (
        _ssn: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _ssn: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _ssn: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _ssn: string,
        _firstName: string,
        _lastName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    authenticateDoctor(
      _id: number | BN | string,
      _userName: string,
      _password: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    transferPatient: {
      (
        _newDoctorId: number | BN | string,
        _patientSsn: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newDoctorId: number | BN | string,
        _patientSsn: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _newDoctorId: number | BN | string,
        _patientSsn: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newDoctorId: number | BN | string,
        _patientSsn: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addHealthEvent: {
      (
        _patientSsn: string,
        _eventData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _patientSsn: string,
        _eventData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _patientSsn: string,
        _eventData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _patientSsn: string,
        _eventData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getPatient(
      _patientSsn: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string }>;

    getEventsForPatient(
      _patientSsn: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getEventDetails(
      _eventId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: BN }>;

    "getDoctor(address)"(
      _doctorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: string }>;

    "getDoctor(uint32)"(
      _doctorId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
